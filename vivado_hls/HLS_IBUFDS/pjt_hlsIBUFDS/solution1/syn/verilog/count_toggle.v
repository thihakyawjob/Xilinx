// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="count_toggle,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.794000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=34,HLS_SYN_LUT=74,HLS_VERSION=2019_2}" *)

module count_toggle (
        ap_clk,
        ap_rst,
        toggle,
        toggle_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
output   toggle;
output   toggle_ap_vld;

reg toggle_ap_vld;

reg   [31:0] count;
reg   [0:0] toggle_max;
wire   [0:0] xor_ln13_fu_72_p2;
reg   [0:0] ap_phi_mux_toggle_max_loc_0_phi_fu_38_p4;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln11_fu_61_p2;
wire   [31:0] add_ln10_fu_49_p2;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 count = 32'd0;
#0 toggle_max = 1'd0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        count <= add_ln10_fu_49_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_61_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        toggle_max <= xor_ln13_fu_72_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((icmp_ln11_fu_61_p2 == 1'd0)) begin
            ap_phi_mux_toggle_max_loc_0_phi_fu_38_p4 = toggle_max;
        end else if ((icmp_ln11_fu_61_p2 == 1'd1)) begin
            ap_phi_mux_toggle_max_loc_0_phi_fu_38_p4 = xor_ln13_fu_72_p2;
        end else begin
            ap_phi_mux_toggle_max_loc_0_phi_fu_38_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_toggle_max_loc_0_phi_fu_38_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        toggle_ap_vld = 1'b1;
    end else begin
        toggle_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_49_p2 = (count + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign icmp_ln11_fu_61_p2 = ((add_ln10_fu_49_p2 == 32'd4294967295) ? 1'b1 : 1'b0);

assign toggle = ap_phi_mux_toggle_max_loc_0_phi_fu_38_p4;

assign xor_ln13_fu_72_p2 = (toggle_max ^ 1'd1);

endmodule //count_toggle
