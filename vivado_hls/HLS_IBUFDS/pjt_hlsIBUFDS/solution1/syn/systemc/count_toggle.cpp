// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "count_toggle.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic count_toggle::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic count_toggle::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> count_toggle::ap_ST_fsm_state1 = "1";
const sc_lv<32> count_toggle::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> count_toggle::ap_const_lv1_0 = "0";
const sc_lv<1> count_toggle::ap_const_lv1_1 = "1";
const sc_lv<32> count_toggle::ap_const_lv32_1 = "1";
const sc_lv<32> count_toggle::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const bool count_toggle::ap_const_boolean_1 = true;

count_toggle::count_toggle(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln10_fu_49_p2);
    sensitive << ( count );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_phi_mux_toggle_max_loc_0_phi_fu_38_p4);
    sensitive << ( toggle_max );
    sensitive << ( xor_ln13_fu_72_p2 );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln11_fu_61_p2 );

    SC_METHOD(thread_icmp_ln11_fu_61_p2);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( add_ln10_fu_49_p2 );

    SC_METHOD(thread_toggle);
    sensitive << ( ap_phi_mux_toggle_max_loc_0_phi_fu_38_p4 );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_toggle_ap_vld);
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_xor_ln13_fu_72_p2);
    sensitive << ( toggle_max );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    count = "00000000000000000000000000000000";
    toggle_max = "0";
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "count_toggle_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, toggle, "(port)toggle");
    sc_trace(mVcdFile, toggle_ap_vld, "(port)toggle_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, count, "count");
    sc_trace(mVcdFile, toggle_max, "toggle_max");
    sc_trace(mVcdFile, xor_ln13_fu_72_p2, "xor_ln13_fu_72_p2");
    sc_trace(mVcdFile, ap_phi_mux_toggle_max_loc_0_phi_fu_38_p4, "ap_phi_mux_toggle_max_loc_0_phi_fu_38_p4");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, icmp_ln11_fu_61_p2, "icmp_ln11_fu_61_p2");
    sc_trace(mVcdFile, add_ln10_fu_49_p2, "add_ln10_fu_49_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("count_toggle.hdltvin.dat");
    mHdltvoutHandle.open("count_toggle.hdltvout.dat");
}

count_toggle::~count_toggle() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void count_toggle::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        count = add_ln10_fu_49_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(icmp_ln11_fu_61_p2.read(), ap_const_lv1_1))) {
        toggle_max = xor_ln13_fu_72_p2.read();
    }
}

void count_toggle::thread_add_ln10_fu_49_p2() {
    add_ln10_fu_49_p2 = (!count.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(count.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void count_toggle::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void count_toggle::thread_ap_phi_mux_toggle_max_loc_0_phi_fu_38_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln11_fu_61_p2.read())) {
            ap_phi_mux_toggle_max_loc_0_phi_fu_38_p4 = toggle_max.read();
        } else if (esl_seteq<1,1,1>(icmp_ln11_fu_61_p2.read(), ap_const_lv1_1)) {
            ap_phi_mux_toggle_max_loc_0_phi_fu_38_p4 = xor_ln13_fu_72_p2.read();
        } else {
            ap_phi_mux_toggle_max_loc_0_phi_fu_38_p4 = "X";
        }
    } else {
        ap_phi_mux_toggle_max_loc_0_phi_fu_38_p4 = "X";
    }
}

void count_toggle::thread_icmp_ln11_fu_61_p2() {
    icmp_ln11_fu_61_p2 = (!add_ln10_fu_49_p2.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<1>(): sc_lv<1>(add_ln10_fu_49_p2.read() == ap_const_lv32_FFFFFFFF);
}

void count_toggle::thread_toggle() {
    toggle =  (sc_logic) (ap_phi_mux_toggle_max_loc_0_phi_fu_38_p4.read()[0]);
}

void count_toggle::thread_toggle_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        toggle_ap_vld = ap_const_logic_1;
    } else {
        toggle_ap_vld = ap_const_logic_0;
    }
}

void count_toggle::thread_xor_ln13_fu_72_p2() {
    xor_ln13_fu_72_p2 = (toggle_max.read() ^ ap_const_lv1_1);
}

void count_toggle::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void count_toggle::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"toggle\" :  \"" << toggle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"toggle_ap_vld\" :  \"" << toggle_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

